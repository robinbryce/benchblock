apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ethnode
spec:
  selector:
    matchLabels:
      app: ethnode
  replicas: 1
  serviceName: ethnode
  podManagementPolicy: "Parallel"

  volumeClaimTemplates:
  - metadata:
      name: ethnode-pv
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 4Gi
  template:
    spec:
      terminationGracePeriodSeconds: 10
      volumes:
        - name: config
          # target for https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/all-in-one-volume.md
          # sources:
          projected:
            sources: []

      containers:
      - name: geth-rrr
        image: quorumengineering/quorum:21.4.1
        imagePullPolicy: Always
        ports:
         - name: tcp-peer
           containerPort: 7200
         - name: tcp-rpc
           containerPort: 8300
         - name: tcp-wsock
           containerPort: 8400
         - name: tcp-metr
           containerPort: 6060
         - name: tcp-pprof
           containerPort: 9545

        volumeMounts:
          - name: ethnode-pv
            mountPath: /data
          # mount for https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/all-in-one-volume.md
          - name: config
            mountPath: /config

        env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: NETWORKID
            valueFrom:
              configMapKeyRef:
                name: ethnode-cfg
                key: NETWORKID
          - name: METRICS_OPTS
            valueFrom:
              configMapKeyRef:
                name: ethnode-cfg
                key: METRICS_OPTS
          - name: CONSENSUS_OPTS
            valueFrom:
              configMapKeyRef:
                name: ethnode-cfg
                key: CONSENSUS_OPTS
          - name: DISCOVERY_OPTS
            valueFrom:
              configMapKeyRef:
                name: ethnode-cfg
                key: DISCOVERY_OPTS

          - name: RPC_APIS
            valueFrom:
              configMapKeyRef:
                name: ethnode-cfg
                key: RPC_APIS
          - name: SYNC_OPTS
            valueFrom:
              configMapKeyRef:
                name: ethnode-cfg
                key: SYNC_OPTS
          - name: PRIVATE_CONFIG
            valueFrom:
              configMapKeyRef:
                name: ethnode-cfg
                key: PRIVATE_CONFIG
          # This is _always_ patched in. so that the patch is easily replaced
          #- name: P2P_PORT
          #  value: "7200"
          - name: WS_OPTS
            valueFrom:
              configMapKeyRef:
                name: ethnode-cfg
                key: WS_OPTS
          - name: APP_LABEL
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['app']
          - name: RPC_OPTS
            valueFrom:
              configMapKeyRef:
                name: ethnode-cfg
                key: RPC_OPTS
          - name: GAS_OPTS
            valueFrom:
              configMapKeyRef:
                name: ethnode-cfg
                key: GAS_OPTS
          - name: MINER_OPTS
            valueFrom:
              configMapKeyRef:
                name: ethnode-cfg
                key: MINER_OPTS
          - name: LOG_OPTS
            valueFrom:
              configMapKeyRef:
                name: ethnode-cfg
                key: LOG_OPTS
          - name: BOOTNODE
            # If this is a bootnode, this label will be present and have its
            # node index
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['bootnode']

        command:
          - sh
        args:
          - -cx
          - |
            set -ex

            # touch SLEEPING
            while [ -f SLEEPING ]; do
              sleep 1
              echo "sleeping for 1s"
            done
            apt-get install -y netcat

            #export NAT_OPTS="--nat=extip:${POD_IP}"
            #export NAT_OPTS="--nat=none"
            #[ -n "${EXTIP}" ] && export NAT_OPTS="--nat=extip:${POD_IP}"
            if [ -n "${EXTIP}" ]; then
              # if we want to permit external peers we should set the external
              # ip. Othwerwise set the lan ip as that lets the bootnodes connect to each other.
              # For bootnodes on extip:PUBLIC-IP the reported IP is WAN but the resolved is local and geth disallows this
              # with the consequence that the bootnodes don't connect to each
              # other
              export NAT_OPTS="--nat=extip:${EXTIP}"
              #export NAT_OPTS="--nat=extip:${POD_IP}"
              #export NAT_OPTS="--nat=none"
            else
              export NAT_OPTS="--nat=extip:${POD_IP}"
            fi

            if [ -n "$BOOTNODE0_NODEPORT" ]; then
                [ -z "${BOOTNODE0_EXTIP}" ] && echo "BOOTNODE0_NODEPORT requires BOOTNODE0_EXTIP" && exit 1
                [ -z "${BOOTNODE1_EXTIP}" ] && echo "Using the NODEPORT feature requires two bootnodes" && exit 1

                export BOOTNODES=enode://${BOOTNODE_PUB0}@${BOOTNODE0_EXTIP}:${BOOTNODE0_NODEPORT}
                if [ -n "$BOOTNODE1_NODEPORT" ]; then
                  [ -z "${BOOTNODE1_EXTIP}" ] && echo "BOOTNODE1_NODEPORT requires BOOTNODE1_EXTIP" && exit 1
                  [ -n "${BOOTNODES}" ] && BOOTNODES="${BOOTNODES},"
                  export BOOTNODES=${BOOTNODES}enode://${BOOTNODE_PUB1}@${BOOTNODE1_EXTIP}:${BOOTNODE1_NODEPORT}
                fi

                HOSTNAME=$(hostname -f)
                if [ -n "${EXTIP}" ]; then
                while true; do
                  [ -n "${BOOTNODE0_EXTIP}" ] && nc -vzu ${BOOTNODE0_EXTIP} ${BOOTNODE0_NODEPORT} && break
                  [ -n "${BOOTNODE1_EXTIP}" ] && nc -vzu ${BOOTNODE1_EXTIP} ${BOOTNODE1_NODEPORT} && break
                  echo "waiting for a bootnode to be available ..."
                  sleep 1
                done
                fi

                if [ "${BOOTNODE} == "0" ]; then
                  DISCOVERY_OPTS="--netrestrict=10.0.0.9/24,${BOOTNODE1_EXTIP}/32,${POD_IP}/16 --bootnodes=enode://${BOOTNODE_PUB1}@${BOOTNODE1_EXTIP}:${BOOTNODE1_NODEPORT}"
                elif [ "${BOOTNODE} == "1" ]; then
                  DISCOVERY_OPTS="--netrestrict=10.0.0.9/24,${BOOTNODE1_EXTIP}/32,${POD_IP}/16 --bootnodes=enode://${BOOTNODE_PUB0}@${BOOTNODE0_EXTIP}:${BOOTNODE0_NODEPORT}"
                else
                  DISCOVERY_OPTS="--netrestrict=${BOOTNODE0_EXTIP}/32,${POD_IP}/16 --bootnodes=${BOOTNODES}"
                fi
            else
              # quorum resolves the bootnode dns names once on startup
              if [ -n "$BOOTNODE_PUB0" ]; then
                BOOTNODES=enode://${BOOTNODE_PUB0}@${BOOTNODE_HOST0}:${P2P_PORT}
              fi

              if [ -n "$BOOTNODE_PUB1" ]; then
                [ -n "${BOOTNODES}" ] && BOOTNODES="${BOOTNODES},"
                BOOTNODES="${BOOTNODES}enode://${BOOTNODE_PUB1}@${BOOTNODE_HOST1}:${P2P_PORT}"
              fi

              # if we expect bootnodes and are not one of them, hang around until
              # one is available. k8s dns will fail until the node is ready
              HOSTNAME=$(hostname -f)
              if [ -n "$BOOTNODE_PUB0" ] && { [ "${HOSTNAME}" != "${BOOTNODE_HOST0}" ] && [ "${HOSTNAME}" != "${BOOTNODE_HOST1}" ]; }; then
              while true; do
                [ -n "${BOOTNODE_HOST0}" ] && nslookup -type=a ${BOOTNODE_HOST0} && break
                [ -n "${BOOTNODE_HOST1}" ] && nslookup -type=a ${BOOTNODE_HOST1} && break
                echo "waiting for a bootnode to be available ..."
                sleep 1
              done
              fi
              if [ -n "$BOOTNODE_PUB0" ]; then
                if  { [ "${HOSTNAME}" = "${BOOTNODE_HOST0}" ] || [ "${HOSTNAME}" = "${BOOTNODE_HOST1}" ]; }; then
                  DISCOVERY_OPTS="--netrestrict=${POD_IP}/16"
                else
                  DISCOVERY_OPTS="--netrestrict=${POD_IP}/16 --bootnodes=${BOOTNODES}"
                fi
              fi
            fi

            # this is the genesis account
            ETHERBASE="b5983bf72a55b48d302638da5292f60f93597d96"

            [ -f /config/static-nodes.json ] && cp -v /config/static-nodes.json /data/node/ && cat /data/node/static-nodes.json

            cd /data/node
            env | grep _OPTS
            env | grep BOOTNODE
            PRIVATE_CONFIG=ignore geth \
                --identity ${APP_LABEL} \
                --networkid ${NETWORKID} \
                ${CONSENSUS_OPTS} \
                ${GAS_OPTS} \
                ${NAT_OPTS} ${DISCOVERY_OPTS} \
                ${METRICS_OPTS} \
                --port ${P2P_PORT} \
                --nodekey /config/nodekey \
                --datadir /data/node \
                --gcmode archive  --syncmode full \
                --nousb \
                ${MINER_OPTS} --miner.etherbase ${ETHERBASE} \
                ${RPC_OPTS} \
                ${RPC_APIS} \
                ${LOG_OPTS}

      initContainers:
      - name: chaininit
        image: quorumengineering/quorum:21.4.1
        imagePullPolicy: Always
        volumeMounts:
          - name: ethnode-pv
            mountPath: /data
          - name: config
            mountPath: /config
        command:
          - sh
        args:
          - -cx
          - |
            set -e
            [ -f /data/node/geth/LOCK ] && exit 0

            echo "initialising node"
            apt-get install -y jq netcat

            geth init \
                --datadir /data/node \
                  /config/genesis.json
