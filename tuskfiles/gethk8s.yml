usage: |
  Generate the network wide kustomizations for any supported consensus

options:
  # don't set default values here, put them in set-environment below
  networkid:
    default: ""
  numbootnodes:
    short: "b"
  node-namespace:
    default: ""
  gastarget:
    usage: "sets the --miner.gastarget option for the nodes"
  gaslimit:
    usage: "sets the --miner.gaslimit option for the nodes"
  recommit:
    usage: "sets the --miner.recommit option for the nodes."

args:
  configdir:
    usage: >
      The config root directory.

run:
  - task:
      name: configure
      options:
        required: >-
          etherbase
          geth_image
          maxnodes
          netrestrict
          networkid
          nodesdir

      args:
        - ${configdir}
  - command:
      exec: |
        set -e

        eval $(cd ${launchdir} && cd ${configdir} && python3 ${tuskdir}/benchjson.py shell-export bench.json)

        [ -n "${node-namespace}" ] && export BBAKE_NODE_NAMESPACE=${node-namespace}
        [ -z "${BBAKE_NODE_NAMESPACE}" ] && export BBAKE_NODE_NAMESPACE=$BBAKE_NAME

        echo "BBAKE_CONSENSUS: $BBAKE_CONSENSUS"
        echo "BBAKE_CONSENSUS_OPTS: $BBAKE_CONSENSUS_OPTS"
        echo "BBAKE_FEATURES: $BBAKE_FEATURES"
        echo "BBAKE_NODE_NAMESPACE: $BBAKE_NODE_NAMESPACE"


        [ -z "$BBAKE_CONSENSUS_OPTS" ] && echo "BBAKE_CONSENSUS_OPTS not defined" && exit 1

        cd ${launchdir} && cd ${configdir}
        # --------------------------------------------------------------------
        # root
        # The namespace is the name - eg rrr7
        yq eval ".namespace = \"$BBAKE_NAME\"" \
          ${tuskdir}/k8s/${BBAKE_CONSENSUS}/kustomization.yaml | \
          tee ${BBAKE_CONSENSUS}/kustomization.yaml
        echo "Wrote ${BBAKE_CONSENSUS}/kustomization.yaml"

        cp ${tuskdir}/k8s/${BBAKE_CONSENSUS}/namespace.yaml ${BBAKE_CONSENSUS}/
        cat ${BBAKE_CONSENSUS}/namespace.yaml
        echo "Wrote ${BBAKE_CONSENSUS}/namespace.yaml"

        # --------------------------------------------------------------------
        # network
        mkdir -p ${BBAKE_CONSENSUS}/network
        cp -v ${tuskdir}/k8s/${BBAKE_CONSENSUS}/network/kustomization.yaml ${BBAKE_CONSENSUS}/network/kustomization.yaml
        cat ${BBAKE_CONSENSUS}/network/kustomization.yaml
        echo "Wrote ${BBAKE_CONSENSUS}/network/kustomization.yaml"

        cp ${BBAKE_NODESDIR}/genesis.json ${BBAKE_CONSENSUS}/network

        # --------------------------------------------------------------------
        # geth client network definition options
        export GAS_OPTS="${BBAKE_RECOMMIT:+--miner.recommit "${BBAKE_RECOMMIT}" }--miner.gastarget ${BBAKE_GASTARGET} --miner.gaslimit ${BBAKE_GASLIMIT}"
        cat <<END > ${BBAKE_CONSENSUS}/network/network.env
        CONSENSUS_OPTS=${BBAKE_CONSENSUS_OPTS}
        NETWORKID=${BBAKE_NETWORKID}
        ETHERBASE=${BBAKE_ETHERBASE}
        GETH_IMAGE=${BBAKE_GETH_IMAGE}
        GAS_OPTS=$GAS_OPTS
        LOG_OPTS=--vmodule consensus/*=3,miner/*=2,eth/*=2,p2p/discover/*=2 --verbosity 2
        END
        cat ${BBAKE_CONSENSUS}/network/network.env
        echo "Wrote ${BBAKE_CONSENSUS}/network/network.env"

        # --------------------------------------------------------------------
        # geth client bootnode options
        if [ ${BBAKE_NUMBOOTNODES} -gt 0 ]; then
          rm -f ${BBAKE_CONSENSUS}/network/bootnodes.env
          for i in $(seq 0 $((${BBAKE_NUMBOOTNODES} - 1))); do
            echo "BOOTNODE_PUB${i}=$(cat ${BBAKE_NODESDIR}/node${i}/enode)" >> ${BBAKE_CONSENSUS}/network/bootnodes.env
            echo "BOOTNODE_HOST${i}=ethnode${i}-0.ethnode${i}.${BBAKE_NODE_NAMESPACE}.svc.cluster.local" >> ${BBAKE_CONSENSUS}/network/bootnodes.env
          done
          cat ${BBAKE_CONSENSUS}/network/bootnodes.env
          echo "Wrote ${BBAKE_NUMBOOTNODES} bootnodes to ${BBAKE_CONSENSUS}/network/bootnodes.env"
        fi

        # --------------------------------------------------------------------
        # static-nodes.json
        # rrr uses discovery. we generate static-nodes.json anyway to be
        # consistent.
        cp ${BBAKE_NODESDIR}/static-nodes.json ${BBAKE_CONSENSUS}/network

        # this assumes static-nodes.json is generated for compose with the hosts listed in
        # ascending order node0, node1 ...
        # > ethnode8.{BBAKE_NAME}.svc.cluster.local
        cat <<PYEND | python3
        import os, json
        from urllib.parse import urlparse, urlunparse
        nodes = []
        nodesdir = os.environ['BBAKE_NODESDIR']
        namespace = os.environ['BBAKE_NODE_NAMESPACE']
        consensus = os.environ['BBAKE_CONSENSUS']
        for i, u in enumerate(json.load(open(f"{nodesdir}/static-nodes.json"))):
          u = urlparse(u)
          if u.hostname != f"node{i}":
            print(f"ERROR: static nodes declared in unexpected order or just plain wrong")
            sys.exit(1)

          nodename = f"ethnode{i}"
          u = urlunparse((u.scheme, f"{u.username}@{nodename}-0.{nodename}.{namespace}.svc.cluster.local:{u.port}", '', '', u.query, ''))
          nodes.append(u)
        json.dump(nodes, open(f"{consensus}/network/static-nodes.json", "w"), sort_keys=True, indent=True)
        PYEND

        # --------------------------------------------------------------------
        # jobs
        # kustomizations for jobs
        cp -v ${BBAKE_CONSENSUS}/network/static-nodes.json jobs/loadtest
        cat base/jobs/loadtest/bbeth.json | jq -r \
          '.bbeth.load.transactions = 10000 |
           .bbeth.load.nodes = (env.BBAKE_MAXNODES|tonumber) |
           .bbeth.load.threads = (env.BBAKE_MAXNODES|tonumber)' \
           > jobs/loadtest/bbeth.json
        echo "Wrote jobs/loadtest/bbeth.json"
        yq eval ".namespace = \"$BBAKE_NAME\"" \
          ${tuskdir}/k8s/jobs/loadtest/kustomization.yaml \
          > jobs/loadtest/kustomization.yaml
        echo "Wrote ${BBAKE_CONSENSUS}/kustomization.yaml"


        # --------------------------------------------------------------------
        # ${BBAKE_CONSENSUS}/node
        export NEWNAME=$(echo $BBAKE_GETH_IMAGE | cut -d ':' -f 1)
        export NEWTAG=$(echo $BBAKE_GETH_IMAGE | cut -d ':' -f 2)

        yq eval --inplace '
          .images[0].newName = env(NEWNAME) |
          .images[0].newTag = env(NEWTAG)' \
          ${BBAKE_CONSENSUS}/node/kustomization.yaml

        # --------------------------------------------------------------------
        # All nodes
        #
        # kustomizations for all the nodes
        # * suffix app and k8s/name labels with the node index
        #
        mkdir -p ${BBAKE_CONSENSUS}/nodes

        cat << EOF > ${BBAKE_CONSENSUS}/nodes/kustomizations.yaml
        # default include all nodes. convenience for when no further node kustomizations are required
        resources:
        EOF
        for i in $(seq 0 $((${BBAKE_MAXNODES} - 1))); do
          echo "- ./node${i}" >> ${BBAKE_CONSENSUS}/nodes/kustomizations.yaml
        done

        for i in $(seq 0 $((${BBAKE_MAXNODES} - 1))); do

          mkdir -p ${BBAKE_CONSENSUS}/nodes/node${i}

          NODENUM=$i yq eval '.nameSuffix = env(NODENUM) |
          .commonLabels.app += env(NODENUM) |
          .commonLabels."app.kubernetes.io/name" += env(NODENUM)' \
            ${tuskdir}/k8s/${BBAKE_CONSENSUS}/nodes/node0/kustomization.yaml \
            > ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml
            echo "Wrote: ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml"

          # Add the component entries for a standard node (the first file is
          # updated)
          for source in $(ls ${tuskdir}/k8s/base/node/node-*.yaml); do
            yq eval-all --inplace 'select(fileIndex == 0) *+ select(fileIndex == 1)' \
              ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml $source
              echo "Merged: $source -> ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml"
          done

          # node features. first, if there are no features merge in the defaults
          if [ -z "${BBAKE_FEATURES}" ]; then
            echo "No node features enabled, merging defaults"
            for source in $(ls ${tuskdir}/k8s/base/node/default-features-node-*.yaml); do
              yq eval-all --inplace 'select(fileIndex == 0) *+ select(fileIndex == 1)' \
                ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml $source
                echo "Merged: $source -> ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml"
            done
          else
            for feature in ${BBAKE_FEATURES}; do
              echo "Node feature: ${feature}"
              for source in $(ls ${tuskdir}/k8s/base/node/feature-${feature}-node-*.yaml); do
                yq eval-all --inplace 'select(fileIndex == 0) *+ select(fileIndex == 1)' \
                  ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml $source
                  echo "Merged $feature: $source -> ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml"
              done
            done
          fi

          # merge in the ${BBAKE_CONSENSUS}/nodes/node0/node-xxx.yaml files
          for source in $(ls ${tuskdir}/k8s/${BBAKE_CONSENSUS}/nodes/node0/node-*.yaml); do
            yq eval-all --inplace 'select(fileIndex == 0) *+ select(fileIndex == 1)' \
              ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml $source
              echo "Merged: $source -> ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml"
          done

          if [ ! ${BBAKE_NUMBOOTNODES} -gt 0 ]; then
            for source in $(ls ${tuskdir}/k8s/static-nodes/node-*.yaml); do
              yq eval-all --inplace 'select(fileIndex == 0) *+ select(fileIndex == 1)' \
                ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml $source
                echo "Merged: $source -> ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml"
            done
          fi
          # there are no general kustomization patches for dyanmic discovery nodes
        done

        # --------------------------------------------------------------------
        # kustomizations for the boot nodes
        for i in $(seq 0 $((${BBAKE_NUMBOOTNODES} - 1))); do

          NODENUM=$i yq eval --inplace '.commonLabels.bootnode = strenv(NODENUM)' \
            ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml
            echo "Updated: ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml"

          NODENUM=$i yq eval \
            '.spec.template.spec.containers[].env[].name += env(NODENUM) |
             .spec.template.spec.containers[].env[].valueFrom.configMapKeyRef.key += env(NODENUM)
            ' \
            ${tuskdir}/k8s/base/node/statefulset-env-bootnode.yaml \
            > base/node/statefulset-env-bootnode${i}.yaml
          echo "Wrote: base/node/statefulset-env-bootnode${i}.yaml"
          echo "- statefulset-env-bootnode${i}.yaml" >> base/node/kustomization-patches.yaml
        done

        if [ ${BBAKE_NUMBOOTNODES} -gt 0 ]; then
          yq eval-all --inplace 'select(fi==0) *+ {"patchesStrategicMerge": select(fi==1)}' \
            base/node/kustomization.yaml base/node/kustomization-patches.yaml
          echo "Updated: base/node/kustomization.yaml"
          rm -f base/node/kustomization-patches.yaml
        fi

        # kustomization for the nodes and bootnodes.  XXX: TODO may need to
        # make this conditional as these target files the consumer is expected
        # to change

        # --------------------------------------------------------------------
        # apisec
        if [ "${BBAKE_APISEC}" == "true" ]; then

            [ -z "${BBAKE_APISEC_INGRESSHOST}" ] && echo "--apisec-ingresshost is required if --apisec is enabled" && exit 1
            [ -z "${BBAKE_APISEC_CERTNAME}" ] && echo "--apisec-certname is required if --apisec is enabled" && exit 1
            [ -z "${BBAKE_APISEC_TOKENEX}" ] && echo "--apisec-tokenex is required if --apisec is enabled" && exit 1

            # network wide
            for source in $(ls ${tuskdir}/k8s/apisec/network-*.yaml); do
              yq eval-all --inplace 'select(fileIndex == 0) *+ select(fileIndex == 1)' \
                ${BBAKE_CONSENSUS}/network/kustomization.yaml $source
                echo "Merged: $source -> ${BBAKE_CONSENSUS}/network/kustomization.yaml"
            done

            # patch in the token exchange address, this ends up in traefik's
            # namespace so it has to be an fqdn / dns resolvable even if its in
            # cluster
            yq eval --inplace '.spec.forwardAuth.address = env(BBAKE_APISEC_TOKENEX)' \
              components/traefik-ingressroute-tokenexchange/middleware-forwardauth.yaml

            # ingres certificate for all nodes

            cp -v ${tuskdir}/k8s/apisec/wild-nodes-cert.yaml ${BBAKE_CONSENSUS}/network/

            yq eval --inplace '.resources += "wild-nodes-cert.yaml"' \
              ${BBAKE_CONSENSUS}/network/kustomization.yaml

            yq eval --inplace \
              '.metadata.name=env(BBAKE_APISEC_CERTNAME) |
               .spec.commonName=env(BBAKE_APISEC_INGRESSHOST) |
               .spec.secretName=env(BBAKE_APISEC_CERTNAME) |
               .spec.dnsNames[0]=env(BBAKE_APISEC_INGRESSHOST) |
               .spec.dnsNames[1]="*." + env(BBAKE_APISEC_INGRESSHOST)' \
            ${BBAKE_CONSENSUS}/network/wild-nodes-cert.yaml

          for i in $(seq 0 $((${BBAKE_MAXNODES} - 1))); do

            # if apisec is enabled, patch it in per node (so that at some point
            # in future we can make it optional per node)

            # merge in the node-xxx.yaml files
            for source in $(ls ${tuskdir}/k8s/apisec/node-*.yaml); do
              yq eval-all --inplace 'select(fileIndex == 0) *+ select(fileIndex == 1)' \
                ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml $source
                echo "Merged: $source -> ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml"
            done

            for source in $(ls ${tuskdir}/k8s/apisec/apisec-node-*.yaml); do
              yq eval-all --inplace 'select(fileIndex == 0) *+ select(fileIndex == 1)' \
                ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml $source
                echo "Merged: $source -> ${BBAKE_CONSENSUS}/nodes/node${i}/kustomization.yaml"
            done

            cp -v ${tuskdir}/k8s/apisec/plugins.json ${BBAKE_CONSENSUS}/nodes/node${i}/

            # copy in the jwt-auth.json and specialise the issuer and jws values
            cat ${tuskdir}/k8s/apisec/jwt-auth.json | jq -r \
              '.tokenValidation.issuers[0] = env.BBAKE_APISEC_ISSUER |
               .tokenValidation.jws.endpoint = env.BBAKE_APISEC_JWS' \
              > ${BBAKE_CONSENSUS}/nodes/node${i}/jwt-auth.json

            # traefik ingressroute token exchange.
            # copy and modify the ingressroute definition, as we need to change the
            # host, path, and possibly tls secret, for each node
            cp -v ${tuskdir}/k8s/apisec/traefik-forwardauth-tokenexchange-ingressroute.yaml ${BBAKE_CONSENSUS}/nodes/node${i}/ingressroute.yaml

            # set the ingress route for traefik
            if [ -n "$BBAKE_APISEC_INGRESSHOST" ]; then
              ROUTE="Host(\`${BBAKE_APISEC_INGRESSHOST}\`) && PathPrefix(\`${BBAKE_APISEC_NODEPATH}/ethnode${i}\`)"
            else
              # If there is no host specified simply set the path
              ROUTE="PathPrefix(\`${BBAKE_APISEC_NODEPATH}/ethnode${i}\`)"
            fi
            ROUTE=$ROUTE yq eval --inplace '.spec.routes[] |= select(.match == "traefik-route").match=env(ROUTE)' ${BBAKE_CONSENSUS}/nodes/node${i}/ingressroute.yaml
            ETHNODE="ethnode${i}" \
            yq eval --inplace '.spec.routes[].services[] |= select(.name == "ethnode").name=env(ETHNODE)' ${BBAKE_CONSENSUS}/nodes/node${i}/ingressroute.yaml

            # tls certificate for the ingress
            if [ -n "${BBAKE_APISEC_CERTNAME}" ]; then
              yq eval --inplace '.spec.tls.secretName=env(BBAKE_APISEC_CERTNAME)' ${BBAKE_CONSENSUS}/nodes/node${i}/ingressroute.yaml
            fi
          done
        fi
