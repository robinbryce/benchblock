---
usage: "make a docker-compose for a geth network from a base.yml and a node.yml"

args:
  configdir:
    usage: >
      The config root directory.
run:
  - task:
      name: configure
      args:
        - ${configdir}
  - command:
      exec: |
        set -e

        TUSKDIR=$(pwd)

        # read the config file fields into BBAKE_ vars.
        eval ${READ_CONFIG}
        cd ${launchdir} && cd ${configdir}
        [ -n "${composeproject}" ] && export BBAKE_COMPOSEPROJECT=${composeproject}
        [ -n "${gaslimit}" ] && export BBAKE_GASLIMIT=${gaslimit}
        [ -n "${gastarget}" ] && export BBAKE_GASTARGET=${gastarget}
        [ -n "${numbootnodes}" ] && export BBAKE_NUMBOOTNODES=${numbootnodes}
        [ -n "${netrestrict}" ] && export BBAKE_NETRESTRICT=${netrestrict}
        [ -n "${networkid}" ] && export BBAKE_NETWORKID=${networkid}
        [ -n "${recommit}" ] && export BBAKE_RECOMMIT=${recommit}

        [ -n "${blockperiod}" ] && export BBAKE_BLOCKPERIOD=${blockperiod}
        [ -n "${requesttimeout}" ] && export BBAKE_REQUESTTIMEOUT=${requesttimeout}

        [ -z ${BBAKE_COMPOSEPROJECT} ] && export BBAKE_COMPOSEPROJECT=${BBAKE_NAME}
        [ -z "$BBAKE_ETHERBASE" ] && export BBAKE_ETHERBASE=${BBAKE_GENDOC_WALLET}

        CONFIGDIR=$(pwd)

        export CONSENSUS_OPTS="\
          ${BBAKE_REQUESTTIMEOUT:+--istanbul.requesttimeout $BBAKE_REQUESTTIMEOUT} \
          ${BBAKE_BLOCKPERIOD:+--istanbul.blockperiod $BBAKE_BLOCKPERIOD}"
        export BBAKE_ETHERBASE=${BBAKE_GENDOC_WALLET}

        source ${BBAKE_PYENV}/bin/activate
        BBAKE_ETHERBASE=$(cat <<PYEND | python3
        import os, sys, pathlib, coincurve, sha3
        if os.environ["BBAKE_ETHERBASE"] or os.environ["BBAKE_ETHERBASE"] == "0x0000000000000000000000000000000000000000":
            sys.exit(0)
        with open(pathlib.Path(os.environ["BBAKE_NODESDIR"]).joinpath("node0", "key")) as f:
            key = coincurve.PrivateKey.from_hex(f.read())
            pub = key.public_key.format(compressed=False)[1:]
            print("0x" + sha3.keccak_256(pub).digest()[-20:].hex())
        PYEND
        )


        export GAS_OPTS="${BBAKE_RECOMMIT:+ --miner.recommit "${BBAKE_RECOMMIT}"} --miner.gastarget ${BBAKE_GASTARGET} --miner.gaslimit ${BBAKE_GASLIMIT}"

        cat <<END > .env
        COMPOSE_PROJECT_NAME=${BBAKE_COMPOSEPROJECT}
        CONSENSUS_OPTS=${CONSENSUS_OPTS}
        NETWORKID=${BBAKE_NETWORKID}
        NETRESTRICT=${BBAKE_NETRESTRICT}
        ETHERBASE=${BBAKE_ETHERBASE}
        QUORUM_SRC=${BBAKE_QUORUM_SRC}
        NODESDIR=${BBAKE_NODESDIR}
        GETH_IMAGE= ${BBAKE_GETH_IMAGE}
        DELVE_IMAGE=${BBAKE_DELVE_IMAGE}
        GAS_OPTS=${GAS_OPTS}
        END
        echo "Wrote .env"

        eval ${UPDATE_CONFIG}

        # Merge in the appropriate number of copies of node.yml to the
        # docker-compose.yml we are generating. As we do that add the
        # numeric suffices to each nodes service entry and the working_dir
        # it uses
        cp ${TUSKDIR}/compose/ibft/base.yml .
        cp ${TUSKDIR}/compose/ibft/node.yml .
        cp base.yml docker-compose.yml

        # each document fragment has to be valid. so they all need the
        # x-node-defaults anchor to be defined.
        cat <<END > tmp.yml
        x-node-defaults:
          &node-defaults
        END

        PORT=8300
        for i in $(seq 0 $((${BBAKE_MAXNODES} - 1)))
        do
            VAL=$i EXPOSED="\"${PORT}:\"" yq eval '
              .node |= .working_dir += env(VAL) |
              del(.x-node-defaults) |
              .node.ports[0] |= . = env(EXPOSED) + . |
              with_entries(.key |= .  + env(VAL))
            ' node.yml
            PORT=$((PORT + 1))
        done >> tmp.yml
        yq eval-all --inplace '
            select(fileIndex == 0) * {"services": select(fileIndex == 1)}
            | del(.services.x-node-defaults)' docker-compose.yml tmp.yml
        echo "Wrote docker-compose.yml"
