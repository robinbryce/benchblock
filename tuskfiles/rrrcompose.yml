---
usage: |
  Generate a docker compose configuration for running rrr

args:
  configdir:
    usage: >
      The config root directory.

run:
  - task:
      name: configure
      args:
        - ${configdir}
  - command:
      exec: |
        set -e

        TUSKDIR=$(pwd)

        # read the config file fields into BBAKE_ vars.
        eval ${READ_CONFIG}

        cd ${launchdir} && cd ${configdir}

        export GAS_OPTS="${BBAKE_RECOMMIT:+ --miner.recommit "${BBAKE_RECOMMIT}"} --miner.gastarget ${BBAKE_GASTARGET} --miner.gaslimit ${BBAKE_GASLIMIT}"
        export CONSENSUS_OPTS="\
        ${BBAKE_ACTIVEMETHOD:+ --rrr.method $BBAKE_ACTIVEMETHOD} \
        --rrr.nc ${BBAKE_NUMCANDIDATES} \
        --rrr.ne ${BBAKE_NUMENDORSERS} \
        --rrr.q ${BBAKE_COMMITTEEQUORUM} \
        --rrr.ta ${BBAKE_ACTIVEHORIZON} \
        --rrr.intentphase ${BBAKE_INTENTPHASE} \
        --rrr.confirmphase ${BBAKE_CONFIRMPHASE} \
        --rrr.roundlength ${BBAKE_ROUNDLENGTH}"

        cat <<END > env.env
        COMPOSE_PROJECT_NAME=${BBAKE_COMPOSEPROJECT}
        CONSENSUS_OPTS=${CONSENSUS_OPTS}
        NETWORKID=${BBAKE_NETWORKID}
        NETRESTRICT=${BBAKE_NETRESTRICT}
        ETHERBASE=${BBAKE_ETHERBASE}
        QUORUM_SRC=${BBAKE_QUORUM_SRC}
        RRR_SRC=${BBAKE_RRR_SRC}
        NODESDIR=${BBAKE_NODESDIR}
        GETH_IMAGE= ${BBAKE_GETH_IMAGE}
        DELVE_IMAGE=${BBAKE_DELVE_IMAGE}
        GAS_OPTS=$GAS_OPTS
        END
        cat env.env
        echo "Wrote env.env"

        cat <<END > bootnodes.env
        BOOTNODE0_PUB=$(cat ${BBAKE_NODESDIR}/node0/enode)
        END

        cat bootnodes.env
        echo "Wrote bootnodes.env"

        cat env.env bootnodes.env > .env
        cat .env
        echo "Wrote .env"

        # Merge in the appropriate number of copies of node.yml to the
        # docker-compose.yml we are generating. As we do that add the
        # numeric suffices to each nodes service entry and the working_dir
        # it uses
        cp ${TUSKDIR}/compose/rrr/base.yml .
        cp ${TUSKDIR}/compose/rrr/node.yml .
        cp base.yml docker-compose.yml

        # each document fragment has to be valid. so they all need the
        # x-node-defaults anchor to be defined.
        cat <<END > tmp.yml
        x-node-defaults:
          &node-defaults
        END

        PORT=8300
        for i in $(seq 0 $((${BBAKE_MAXNODES} - 1)))
        do
            VAL=$i EXPOSED="\"${PORT}:\"" yq eval '
              .node |= .working_dir += env(VAL) |
              del(.x-node-defaults) |
              .node.ports[0] |= . = env(EXPOSED) + . |
              with_entries(.key |= .  + env(VAL))
            ' node.yml
            PORT=$((PORT + 1))
        done >> tmp.yml
        yq eval-all --inplace '
            select(fileIndex == 0) * {"services": select(fileIndex == 1)}
            | del(.services.x-node-defaults)' docker-compose.yml tmp.yml
        # yq eval-all --inplace 'select(fileIndex == 0) * {"services": select(fileIndex == 1)} | del(.services.x-node-defaults)' docker-compose.yml tmp.yml
