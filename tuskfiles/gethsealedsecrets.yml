usage: |
  Seal (or reseal) the node keys secrets in gitops friendly bitnami/sealedsecrets

options:
  startnode:
    usage: "to seal (or reseal) a range node with the chosen options"
    type: int
    default: 0
    short: s
  endnode:
    usage: "to seal (or reseal) a range node with the chosen options"
    type: int
    default: 0
    short: e
  onenode:
    usage: "to seal (or reseal) a single node with the chosen options"
    type: int
    default: -1
    short: "n"

  sealedsecrets-cert:
    usage: "override the sealedsecrets-cert for this run - does not update bench.json"

  # usecase for this is putting each node in its own namespace which isn't
  # fully supported yet but its on the map
  sealedsecrets-namespace:
    usage: "override the sealedsecrets-namespace for this run - does not update bench.json"

  # options that do not come from bench.json
  destdir:
    usage: "nodes directory for output sealedsecrets resources. node{N} created if not exist. defaults to use the standard location"
    default: ""

args:
  configdir:
    usage: >
      The config root directory.

run:
  - task:
      name: configure
      options:
        required: >-
          sealedsecrets-cert
          sealedsecrets-namespace

      args:
        - ${configdir}
  - command:
      exec: |
        set -e

        eval $(cd ${launchdir} && cd ${configdir} && python3 ${tuskdir}/benchjson.py shell-export bench.json)
        echo "BBAKE_FEATURES: $BBAKE_FEATURES"
        echo "BBAKE_SEALEDSECRETS_CERT: $BBAKE_SEALEDSECRETS_CERT"
        echo "BBAKE_SEALEDSECRETS_NAMESPACE: $BBAKE_SEALEDSECRETS_NAMESPACE"

        [ -z ${BBAKE_SEALEDSECRETS_CONTROLLER_NAMESPACE} ] && BBAKE_SEALEDSECRETS_CONTROLLER_NAMESPACE=flux-system
        echo "BBAKE_SEALEDSECRETS_CONTROLLER_NAMESPACE: $BBAKE_SEALEDSECRETS_CONTROLLER_NAMESPACE"


        DESTDIR=${BBAKE_CONSENSUS}/nodes
        [ -n "${destdir}" ] && $(cd ${launchdir} && mkdir -p ${destdir}) && DESTDIR=$(cd ${launchdir} && cd ${destdir} && pwd)
        echo "DESTDIR: $DESTDIR"

        cd ${launchdir} && cd ${configdir}

        [ -z "$BBAKE_SEALEDSECRETS_CERT" ] && echo "BBAKE_SEALEDSECRETS_CERT not defined" && exit 1
        curl -kso $DESTDIR/sealed-secrets.pem $BBAKE_SEALEDSECRETS_CERT

        START_NODE=${startnode}
        LAST_NODE=$((${BBAKE_MAXNODES} - 1))

        [ ${endnode} -ne 0 ] && LAST_NODE=${endnode}
        # onenode trumps the range
        [ ${onenode} -gt -1 ] && START_NODE=${onenode} LAST_NODE=${onenode}

        for i in $(seq ${START_NODE} ${LAST_NODE}); do

            TMPDIR=${DESTDIR}/node${i}/sealedkeys
            MANIFEST_NAME=nodekey
            NAME=ethnodekey-$i

            mkdir -p $TMPDIR

            # force the key file into git ignore to avoid gitops accidents
            if ! grep key ${DESTDIR}/node${i}/.gitignore 2>&1 >> /dev/null; then
              echo key >> ${DESTDIR}/node${i}/.gitignore
            fi

            cp ${BBAKE_CONSENSUS}/nodes/node${i}/key ${TMPDIR}/

            # using kustomization here is just an easy way to generate the
            # sercret resource from a disc file
        cat <<EOF > ${TMPDIR}/kustomization.yaml
        generatorOptions:
          disableNameSuffixHash: true
        namespace: $BBAKE_SEALEDSECRETS_NAMESPACE
        secretGenerator:
          - name: $NAME
            files:
              - key
        EOF

            kustomize build $TMPDIR > $TMPDIR/secret-${MANIFEST_NAME}.yaml

            kubeseal --cert $DESTDIR/sealed-secrets.pem < $TMPDIR/secret-${MANIFEST_NAME}.yaml > $DESTDIR/node${i}/secret-${MANIFEST_NAME}sealed.yaml

            # rm rf is risky, but so is leaving secrets around where they may
            # get 'git add .' ed
            rm -rf $TMPDIR
            [ -f $DESTDIR/node${i}/secret-${MANIFEST_NAME}sealed.yaml ] && echo "Wrote $DESTDIR/node${i}/secret-${MANIFEST_NAME}sealed.yaml"
        done

        rm -f $DESTDIR/sealed-secrets.pem
