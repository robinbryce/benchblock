---
usage: "regenerate all node keys and wallets"
options:
  start:
    usage: "index of first node to generate a key for"
    short: s
    type: int
    default: 0
  end:
    usage: "index of last node to generate a key for"
    short: e
    type: int
    default: -1

args:
  configdir:
    usage: >
      The config root directory.
run:
  - task:
      name: configure
      args:
        - ${configdir}

  - command:
      exec: |
        set -e

        # read the config file fields into BBAKE_ vars.
        eval $(cd ${launchdir} && cd ${configdir} && python3 ${tuskdir}/benchjson.py shell-export bench.json)
        cd ${launchdir} && cd ${configdir}


        # Use the address of node0's node key as the genesis account (which
        # gets the gendoc_balance)

        source ${BBAKE_PYENV}/bin/activate
        cat <<PYEND | python3
        import os, json, coincurve
        from pathlib import Path

        nodesdir = os.environ['BBAKE_NODESDIR']
        maxnodes = int(os.environ['BBAKE_MAXNODES'])

        start = int("${start}")
        end = int("${end}")
        if end == -1:
          end = maxnodes - 1

        for i in range(start, end + 1):

            dirname = f"{nodesdir}/node{i}"

            Path(dirname).mkdir(parents=True, exist_ok=True)

            # delete the keys first so we don't ever end up in a weird state
            for fn in ("key", "enode"):
                try:
                    os.remove(f"{dirname}/{fn}")
                except OSError:
                  pass

            p = coincurve.PrivateKey()
            key = p.to_hex()

            x, y = p.public_key.point()
            x = x.to_bytes(length=256//8, byteorder="big").hex()
            y = y.to_bytes(length=256//8, byteorder="big").hex()
            enode = x + y

            for fn in ("key", "enode"):
                with open(Path(f"{dirname}/{fn}"), "w") as f:
                    f.write(locals()[fn])
                    print(f"Wrote {dirname}/{fn}")

        # Now record the node0 pub key as the bootnode address (not all
        # configurations support discovery)
        if start == 0:
          keyfile = f"{nodesdir}/node0/key"
          pub = None
          with open(Path(keyfile)) as f:
              key = coincurve.PrivateKey.from_hex(f.read())
              pub = key.public_key.format(compressed=False)[1:]
          addr = pub[-20:]

          j = None
          with open("bench.json") as f:
              j = json.load(f)

          j["bootnode0"] = pub.hex()
          with open("bench.json", "w") as f:
              json.dump(j, f, indent=2, sort_keys=True)

          print(f"Wrote bootnode0 to config: {pub.hex()}")
        PYEND
        echo "gethkeys: done"
        cat bench.json

        if $((${start} == 0)); then
        cat <<END > bootnodes.env
        BOOTNODE0_PUB=$(cat ${BBAKE_NODESDIR}/node0/enode)
        END
          cat bootnodes.env
          echo "Updated bootnode.env for docker-compose"

          if [ -f env.env ]; then
            cat env.env bootnodes.env > .env
            cat .env
            echo "Updated .env for docker-compose"
          fi
        fi
        echo "-------------------- gethkeys ok"
