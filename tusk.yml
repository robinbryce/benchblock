interpreter: bash -c
name: benchblock
usage: |

  Use the `new' command to create a full configuration for a supported
  consensus scheme. `new -i' can be combined with the individual consensus
  commands for more control.

  `gethkeys' and `gethgendoc' are used to
  generate the node keys and genesis document for all consensus models (and to
  force re-genesis). commands prefixed with `raft', `rrr', or `ibft' deal with
  coresponding consensus schemes.

  The various sub commands can be useful if you want to regenerate keys, reset
  a chain or perorm other maintenance on a configuration without reseting it
  completely. Review the definition of the main conesnsus commands `raft',
  `ibft' and 'rrr' to see the individual commands that effect each.

  `jpcfg' readies a network configuration for collecting chainhammer compatible
  block data and `jpyrender' processes the data collected by the load
  generation tool [see ](./go/bbencheth/main.go)

  The other commands provide various conveniences

options:
  # network configuration options relevant for all
  name:
    usage: >
      The network name, defaults to <consensus><maxnodes>
    default: ""

  maxnodes:
    usage: >
      The number of nodes for the network. For PoA networks, it is the number of *validating* nodes.
    default: ""
    short: "n"

  nodesdir:
    usage: >
      each node gets a subdirectory here named node{N}. relative paths are relative to the callers cwd.
      defaults to <consensus>/nodes
    default: ""

  geth_image:
    usage: >
      the docker image to use for geth-rrr. compose files and k8s manifests
      reference this.
    default: robustroundrobin/geth:main

  delve_image:
    usage: the docker image to use for running geth-rrr in for remote debug
    default: robustroundrobin/delve:main

  k8s:
    usage: >
      Generate a set of kubernetes manifiests (kustomizations) instead of
      the default docker-compose setup.
    type: bool
    short: k

  genesis:
    default: genesis-in.json
    short: "g"

  recommit:
    usage: >
      sets the --miner.recommit option for the nodes. currently set high
      because it invalidates the current round intent if it fires mid round
    default: "2000s"

  gastarget:
    usage: sets the --miner.gastarget option for the nodes
    default: "18200000"

  gaslimit:
    usage: sets the --miner.gaslimit option for the nodes
    default: "18200000"

  gendoc_wallet:
    usage: >
      This wallet address will be included in the gensis document allocs.
      Its balance is set by gendoc_balance. This is a convenience that
      enables the same wallet key to be re-used accross multiple
      configurations.
    default: ""

  gendoc_balance:
    default: "1000000000000000000000000000"

  nodeallocs:
    usage: >
      How many of the node keys to create alloc accounts for. The ballance
      is set to gendoc_balance for all.
    default: 0

  pyenv:
    usage: >
      Override the directory to create the python virtualenv in. By default
      there is an env per network. This option can be used to share the env.
      By default it will be called env and created in the configdir
    default: ""

  # image and source options

  rrrctl_image:
    usage: the docker iamge to use for running rrrctl (needed to produce rrr extraData)
    default: robustroundrobin/rrrctl:main

  # source options. only used for compose networks and then only if interactively debuging
  # the node
  quorum_src:
    usage: >
        the host directory to be mounted as /go/src/quorum. must contain quorum clone.
        only required if you need to interactively debug the node.
    default:
      command: echo "${launchdir}/quorum"
  rrr_src:
    default:
      command: echo "${launchdir}/go-rrr"

  # configuration options

  launchdir:
    # treat this as private
    usage: >
      Don't set this option. Its a work around for a go-tusk peculiarity
    environment: PWD

  config:
    private: true
    usage: >
      Base filename of the config file to use in configdir. Enables alternate
      configs for the same network.
    default:
      bench.json

  configshow:
    usage: "Report which, if any, supported configdir config file VAR's"
    type: bool

  # private vars
  thistusk:
    private: true
    usage: "so this tusk file can refer to its own file name for recursive execution"
    default:
      command: echo $(pwd)/tusk.yml

  configvars:
    private: true
    usage: >
      The list of config VARS supported by most tasks. Use --configshow
      for any command to get the definite list.
    default: "name consensus k8s pyenv nodesdir maxnodes genesis quorum_src geth_image delve_image pyenv gendoc_extra gendoc_wallet gendoc_balance"

tasks:

  kapply:
    usage: "Runs kustomize build | kubectl apply -f - for the configured consensus"
    options:
      context:
        usage: "kubectl explicit context to use rather than current"
        short: "c"
        default: ""
    args:
      configdir:
    run:
      - task:
          name: configure
          args:
            - ${configdir}
      - command:
          exec: |
            set -e
            CONFIGVARS="${configvars} k8s_context"
            eval ${READ_CONFIG}
            if ${configshow}; then eval ${SHOW_CONFIG}; exit 0; fi
            cd ${launchdir} && cd ${configdir}

            # priority to the command line. if neither the command line nor the
            # k8s_context config vars is set, use the current context
            CONTEXT=${context}
            [ -z "${CONTEXT}" ] && CONTEXT=${BBENCH_K8S_CONTEXT}
            kustomize build ${BBENCH_CONSENSUS} | kubectl ${CONTEXT:+ --context ${CONTEXT}} apply -f -

  kdelete:
    usage: "Runs kustomize build | kubectl delete -f - for the configured consensus"
    options:
      context:
        usage: "kubectl explicit context to use rather than current"
        short: "c"
        default: ""
    args:
      configdir:
    run:
      - task:
          name: configure
          args:
            - ${configdir}
      - command:
          exec: |
            set -e
            CONFIGVARS="${configvars} k8s_context"
            eval ${READ_CONFIG}
            if ${configshow}; then eval ${SHOW_CONFIG}; exit 0; fi
            cd ${launchdir} && cd ${configdir}

            # priority to the command line. if neither the command line nor the
            # k8s_context config vars is set, use the current context
            CONTEXT=${context}
            [ -z "${CONTEXT}" ] && CONTEXT=${BBENCH_K8S_CONTEXT}

            kustomize build ${BBENCH_CONSENSUS} | kubectl ${CONTEXT:+ --context ${CONTEXT}} delete -f -

  pf:
    usage: "port formward to all k8s nodes. run in seperate terminal. ctrl-c to kill the forwardings"

    options:
      bootnodes:
        type: int
        short:  "b"
        default: 0
      start:
        usage: "first pod index"
        short: "s"
        type: int
        default: 0
      context:
        default: ""
        short: "c"
    args:
      namespace:
      end:
    run:
      - command:
          exec: |
            set -e

            CONTEXT=${context}

            COMMANDS=""

            START=${start}
            END=${end}

            for i in $(seq ${START} $((${END} - 1))); do
              PORT=$(printf '83%02d' ${i})
              CMD="(kubectl ${CONTEXT:+--context ${CONTEXT}} port-forward -n ${namespace} ethnode${i}-0 ${PORT}:8300)"
              COMMANDS="${COMMANDS} $CMD &"
            done

            i=${end}
            PORT=$(printf '83%02d' ${i})
            CMD="kubectl ${CONTEXT:+--context ${CONTEXT}} port-forward -n ${namespace} ethnode${i}-0 ${PORT}:8300"
            COMMANDS="$COMMANDS $CMD"
            echo $COMMANDS
            (trap 'kill 0' SIGINT; eval $COMMANDS)

  attach:
    usage: "geth attach using docker exec go run"
    options:
      node:
        default: "1"
        short: "n"
    args:
      project:
        usage: >
          docker compose project with the to attach to. try raft[n], ibft[n] or
          rrr[n] where the n is the maxnodes for the network in question

    run:
      - command:
          exec: |
            set -e
            docker exec -it ${project}_node${node}_1 \
              geth attach /nodes/node${node}/data/geth.ipc

  loadtest:
    include: tuskfiles/loadtool.yml

  new:
    usage: >
      Configure a new network configdir from a stock profile
    options:
      profile:
        short: "p"
        usage: provide the default configuration values
      init-only:
        type: bool
        short: "i"
      context:
        usage: "kubernetes (kubectl) config context to use. Ignored unless the profile enables k8s manifiests"
        short: "c"
        default: ""

    args:
      configdir:
      consensus:
    run:
      - task:
          name: configure
          args:
            - ${configdir}
      - command:
          exec: |
            set -e
            TUSKDIR=$(pwd)
            echo "launchdir: ${launchdir}"

            cat <<PYEND | python3
            import os, sys, json
            from pathlib import Path

            consensus="${consensus}"

            tuskdir = Path(os.getcwd()).resolve()

            configdir = "${configdir}"
            configdir = Path("${launchdir}").joinpath(configdir).resolve()
            configdir.mkdir(parents=True, exist_ok=True)
            os.chdir(configdir)

            # nodesdir defaults to configdir/<consensus>/nodes
            nodesdir = "${nodesdir}"
            if nodesdir:
              nodesdir = Path("${launchdir}").joinpath(nodesdir).resolve()
            else:
              nodesdir = configdir.joinpath(consensus, "nodes").resolve()

            nodesdir.mkdir(parents=True, exist_ok=True)

            # pyenvdir defaults to configdir/env
            pyenvdir = "${pyenv}"
            if pyenvdir:
              pyenvdir = Path("${launchdir}").joinpath(pyenvdir).resolve()
            else:
              pyenvdir = configdir.joinpath("env").resolve()

            # The configuration defaults come from the appropriate benchblock
            # profile for the consensus and deployment method
            deploymode="k8s"
            if "${k8s}" != "true":
              deploymode="compose"

            profile = "${profile}"
            if not profile:
              profile=tuskdir.joinpath("configs", f"{consensus}-{deploymode}-default.json").resolve()
            else:
              # try first as whole file relative to launch dir
              p=Path("${launchdir}").joinpath(profile).resolve()
              if not p.is_file():
                p=tuskdir.joinpath("configs", f"{consensus}-{deploymode}-{profile}.json").resolve()
              profile = p

            if not profile.exists():
              print(f"profile {profile} does not exist")
              sys.exit(1)

            bench_json = json.load(open(profile))
            maxnodes = "${maxnodes}" or bench_json.get("maxnodes")
            name = "${name}" or consensus + maxnodes

            # these are commong to most/all consensus methods
            opts = dict(
              name=name,
              consensus=consensus,
              k8s_context="${context}",
              pyenv=str(pyenvdir),
              k8s="${k8s}",
              maxnodes=maxnodes,
              nodesdir=str(nodesdir),
              quorum_src="${quorum_src}",
              geth_image="${geth_image}",
              delve_image="${delve_image}",
              genesis="${genesis}",
              gendoc_wallet="${gendoc_wallet}",
              nodeallocs="${nodeallocs}",
              gendoc_balance="${gendoc_balance}",
              timestamp_scale="1",
              recommit="${recommit}"
            )
            if consensus == "raft":
              opts["timestamp_scale"] = "1000000000"

            for k, v in opts.items():
              if v:
                bench_json[k] = v
            with open("bench.json", "w") as f:
                json.dump(bench_json, f, indent=2, sort_keys=True)

            print(json.dumps(bench_json, indent=2, sort_keys=True))
            print(f"Wrote: {os.getcwd()}/bench.json")
            PYEND

            CONFIGVARS="${configvars} gendoc_extra gendoc_wallet gendoc_balance nodeallocs timestamp_scale recommit"
            eval ${READ_CONFIG}

            python3 -m venv ${BBENCH_PYENV}
            source ${BBENCH_PYENV}/bin/activate
            pip3 install -r ${TUSKDIR}/requirements.txt

            cd ${launchdir} && cd ${configdir}

            [ -d ${TUSKDIR}/k8s/${BBENCH_CONSENSUS} ] && mkdir -p ${BBENCH_CONSENSUS}

            if ${k8s}; then
              [ -d ${TUSKDIR}/k8s/base ] && mkdir -p base && cp -r ${TUSKDIR}/k8s/base/* base
              [ -d ${TUSKDIR}/k8s/jobs ] && mkdir -p jobs && cp -r ${TUSKDIR}/k8s/jobs/* jobs
              [ -d ${TUSKDIR}/k8s/${BBENCH_CONSENSUS} ] && cp -r ${TUSKDIR}/k8s/${BBENCH_CONSENSUS}/* ${BBENCH_CONSENSUS}
            fi

            eval ${SHOW_CONFIG}

      - when:
          equal: {init-only: false}
        command:
          exec: |
            set -ex
            TUSKDIR=$(pwd)
            cd ${launchdir}
            tusk -qf ${TUSKDIR}/tusk.yml ${consensus} ${configdir}

  ibft:
    usage: >
      Configure a new ibft network
    options:

      blockperiod:
        usage: ibft blockperiod (rate of block production) in seconds
        default: "1"

    args:
      configdir:
        usage: Directory to put the network in
    run:
      - task:
          name: configure
          args:
            - ${configdir}
      - command:
          exec: |
            set -e
            TUSKDIR=$(pwd)

            # read the config file fields into BBENCH_ vars.
            CONFIGVARS="${configvars} gendoc_extra gendoc_wallet gendoc_balance blockperiod"
            eval ${READ_CONFIG}
            if ${configshow}; then eval ${SHOW_CONFIG}; fi

            [ "${BBENCH_CONSENSUS}" != "ibft" ] && echo "Configured for ${BBENCH_CONSENSUS} not ibft" && exit 1

            cd ${launchdir} && cd ${configdir}

            cat <<PYEND | python3
            import os, sys, json
            from pathlib import Path

            bench_json = json.load(open("bench.json", "r"))

            for k, v in dict(
              maxnodes="${maxnodes}",
              quorum_src="${quorum_src}",
              geth_image="${geth_image}",
              delve_image="${delve_image}",
              genesis="${genesis}",
              gendoc_wallet="${gendoc_wallet}",
              nodeallocs="${nodeallocs}",
              gendoc_balance="${gendoc_balance}",
              recommit="${recommit}",
              blockperiod="${blockperiod}").items():
              if v:
                bench_json[k] = v
            with open("bench.json", "w") as f:
                json.dump(bench_json, f, indent=2, sort_keys=True)
            print(json.dumps(bench_json, indent=2, sort_keys=True))
            print(f"Wrote: {os.getcwd()}/bench.json")
            PYEND

      - task:
          name: gethkeys
          args:
            - ${configdir}
      - task:
          name: ibftextra
          args:
            - ${configdir}
      - task:
          name: gethstatic
          args:
            - ${configdir}
      - task:
          name: gethgen
          args:
            - ${configdir}

      - command:
          exec: |
            set -ex
            TUSKDIR=$(pwd)
            CONFIGVARS="${configvars}"
            eval ${READ_CONFIG}

            CMD=ibftcompose
            ${BBENCH_K8S} && CMD=ibftk8s

            cd ${launchdir}
            tusk -qf ${TUSKDIR}/tusk.yml ${CMD} ${configdir} \
              --gastarget=${gastarget} --gaslimit=${gaslimit} --recommit=${recommit}

  raft:
    usage: >
      Configure a new raft network

    options:
      raft_blocktime:
        usage: the --raftblocktime cosensus parameter for starting geth (ms)
        default: ""

    args:
      configdir:
        usage: Directory to put the network in
    run:
      - task:
          name: configure
          args:
            - ${configdir}

      - command:
          exec: |
            set -e
            TUSKDIR=$(pwd)

            # read the config file fields into BBENCH_ vars.
            CONFIGVARS="${configvars} gendoc_extra gendoc_wallet gendoc_balance blockperiod raft_blocktime"
            eval ${READ_CONFIG}
            if ${configshow}; then eval ${SHOW_CONFIG}; fi

            [ "${BBENCH_CONSENSUS}" != "raft" ] && echo "Configured for ${BBENCH_CONSENSUS} not raft" && exit 1

            # prioritize commandline setting for raft blocktime. if its not
            # already set (by the profile or by hand) force it to 50 (the
            # quorum default)
            RAFT_BLOCKTIME="${raft_blocktime}"
            [ -z "${RAFT_BLOCKTIME}" ] && RAFT_BLOCKTIME=${BBENCH_RAFT_BLOCKTIME}
            [ -z "${RAFT_BLOCKTIME}" ] && RAFT_BLOCKTIME=50

            cd ${launchdir} && cd ${configdir}

            cat <<PYEND | python3
            import os, sys, json
            from pathlib import Path

            bench_json = json.load(open("bench.json", "r"))

            for k, v in dict(
              maxnodes="${maxnodes}",
              quorum_src="${quorum_src}",
              geth_image="${geth_image}",
              delve_image="${delve_image}",
              genesis="${genesis}",
              gendoc_wallet="${gendoc_wallet}",
              nodeallocs="${nodeallocs}",
              gendoc_balance="${gendoc_balance}",
              recommit="${recommit}",
              raft_blocktime="${RAFT_BLOCKTIME}"
              ).items():
              if v:
                bench_json[k] = v
            with open("bench.json", "w") as f:
                json.dump(bench_json, f, indent=2, sort_keys=True)
            print(json.dumps(bench_json, indent=2, sort_keys=True))
            print(f"Wrote: {os.getcwd()}/bench.json")
            PYEND

      - task:
          name: gethkeys
          args:
            - ${configdir}
      - task:
          name: gethstatic
          options:
            querystring: "?discport=0&raftport=50000"
          args:
            - ${configdir}
      - task:
         name: gethgen
         args:
           - ${configdir}
      - command:
          exec: |
            set -ex
            TUSKDIR=$(pwd)
            CONFIGVARS="${configvars}"
            eval ${READ_CONFIG}

            CMD=raftcompose
            ${BBENCH_K8S} && CMD=raftk8s

            cd ${launchdir}
            tusk -qf ${TUSKDIR}/tusk.yml ${CMD} ${configdir} \
              --gastarget=${gastarget} --gaslimit=${gaslimit} --recommit=${recommit}

  rrr:
    usage: >
      Configure a new docker compose based rrr network
      # This task also ilustrates the full sequence of steps to prepare an rrr
      # compose setup
    options:
      rrr_src:
        default:
          command: echo "${launchdir}/go-rrr"
      numcandidates:
        short: c
        usage: "set the number of canidate leaders per round"
        default: ""
      numendorsers:
        short: e
        usage: "set the size of the endorser committee"
        default: ""
      committeequorum:
        short: q
        default: ""
      activehorizon:
        usage: >
          number of blocks to allow for activity. Any identities without
          endorsements or blocks in this number of blocks is droped. (and will
          have to re-enrol).
        short: a
        default: ""
      intentphase:
        usage: number of miliseconds for the rrr intent phase
        default: ""
      confirmphase:
        usage: number of milliseconds for the rrr confirm phase
        default: ""
      roundlength:
        usage: >
          total roundlength in milliseconds. must be greater than intent + confirm (rember to
          allow for block disemination, 2s  or more is fair)
        default: ""

    args:
      configdir:
    run:
      - task:
          name: configure
          args:
            - ${configdir}
      - command:
          exec: |
            set -e

            TUSKDIR=$(pwd)

            # read the config file fields into BBENCH_ vars.
            CONFIGVARS="${configvars}"
            eval ${READ_CONFIG}
            if ${configshow}; then eval ${SHOW_CONFIG}; fi

            [ "${BBENCH_CONSENSUS}" != "rrr" ] && echo "Configured for ${BBENCH_CONSENSUS} not rrr" && exit 1

            cd ${launchdir} && cd ${configdir}

            cat <<PYEND | python3
            import os, sys, json
            from pathlib import Path

            bench_json = json.load(open("bench.json", "r"))

            for k, v in dict(
              rrr_src="${rrr_src}",
              rrrctl_image="${rrrctl_image}",
              delve_image="${delve_image}",
              genesis="${genesis}",
              gendoc_wallet="${gendoc_wallet}",
              nodeallocs="${nodeallocs}",
              gendoc_balance="${gendoc_balance}",
              recommit="${recommit}",
              numcandidates="${numcandidates}",
              numendorsers="${numendorsers}",
              committeequorum="${committeequorum}",
              activehorizon="${activehorizon}",
              intentphase="${intentphase}",
              confirmphase="${confirmphase}",
              roundlength="${roundlength}").items():
              if v:
                bench_json[k] = v
            with open("bench.json", "w") as f:
                json.dump(bench_json, f, indent=2, sort_keys=True)
            print(json.dumps(bench_json, indent=2, sort_keys=True))
            print(f"Wrote: {os.getcwd()}/bench.json")
            PYEND

      - task:
          name: gethkeys
          args:
            - ${configdir}
      - task:
          # this is just to provide config for the loadtool. its ignored
          # otherwise
          name: gethstatic
          args:
            - ${configdir}
      - task:
          name: rrralpha
          args:
            - ${configdir}

      - task:
          name: rrrinit
          args:
            - ${configdir}
      - command:
          exec: |
            set -ex
            TUSKDIR=$(pwd)
            CONFIGVARS="${configvars}"
            eval ${READ_CONFIG}

            CMD=rrrcompose
            ${BBENCH_K8S} && CMD=rrrk8s

            cd ${launchdir}
            tusk -qf ${TUSKDIR}/tusk.yml ${CMD} ${configdir} \
              --gastarget=${gastarget} --gaslimit=${gaslimit} --recommit=${recommit}

  configure:
    usage: >
      Put the rune for reading the config file into an environment variable so
      that it can be more readily re-used.  This one horror pays for a lot of
      simplicity elsewhere. The double cd trick combines the launchdir captured
      before tusk changes directory to the task file and then combines it with
      the cli choice of current directory. So that the cli choice remains
      relative to the launchdir.  Then we suck out the top level fields in the
      json config directory and expose them in a bash friendly format. This
      enables both shell tusk tasks and python to share the same config,
      without having to duplicate a bunch of stuff.
    private: true
    args:
      configdir:
    run:
      # execute these fragments in the task like this:
      #   CONFIGVARS="${configvars} extra_config_var1 extra_config_var2"
      #   eval ${READ_CONFIG}
      #   if ${configshow}; then eval ${SHOW_CONFIG}; exit 0; fi
      set-environment: {
        READ_CONFIG: "\
          $(cd ${launchdir} && cd ${configdir} \
          && python3 -c \"import json; import shlex;\
                          [print(f'export BBENCH_{k.upper()}={v}') \
                              for k, v in json.load(open('${config}')).items() if v]\")",
        SHOW_CONFIG: "for v in ${CONFIGVARS}; do vv=BBENCH_${v^^}; echo ${vv}=${!vv}; done"}

  gethgendoc:
    include: tuskfiles/gethgendoc.yml

  gethkeys:
    include: tuskfiles/gethkeys.yml

  gethgen:
    include: tuskfiles/gethgen.yml

  gethstatic:
    include: tuskfiles/gethstatic.yml

  # raft consensus commands
  raftk8s:
    include: tuskfiles/raftk8s.yml

  # ibft consensus commands
  ibftextra:
    include: tuskfiles/ibftextra.yml

  ibftcompose:
    include: tuskfiles/ibftcompose.yml

  ibftk8s:
    include: tuskfiles/ibftk8s.yml

  # raft consensus commands
  raftcompose:
    include: tuskfiles/raftcompose.yml

  # rrr consensus commands
  rrralpha:
    include: tuskfiles/rrralpha.yml

  rrrextra:
    include: tuskfiles/rrrextra.yml

  rrrinit:
    include: tuskfiles/rrrinit.yml

  rrrcompose:
    include: tuskfiles/rrrcompose.yml

  rrrk8s:
    include: tuskfiles/rrrk8s.yml

  knet:
    include: tuskfiles/knet.yml

  kex:
    options:
      node:
        short: "n"
        default: 0
        type: int
    args:
      configdir:
      exec:
    run:
      - task:
          name: configure
          args:
            - ${configdir}
      - command:
          exec: |
            set -ex
            # read the config file fields into BBENCH_ vars.
            CONFIGVARS="${configvars} rrr_src gendoc_extra gendoc_wallet gendoc_balance numcandidates numendorsers committeequorum intentphase confirmphase roundlength"
            eval ${READ_CONFIG}
            if ${configshow}; then eval ${SHOW_CONFIG}; exit 0; fi

            cd ${launchdir} && cd ${configdir}

            i=${node}
            POD=rrr-ethnode${i}-0
            export POD

            kubectl \
              $([ -z '${exec}' ] && echo -n '-it') \
              -n ethnet exec ${POD} -- \
              /usr/local/bin/geth \
              attach /data/node/geth.ipc \
                $([ -n '${exec}' ] && echo -n --exec '${exec}')


  # jupyter reporting
  jpycfg:
    include: tuskfiles/jpycfg.yml

  jpyrender:
    include: tuskfiles/jpyrender.yml

  tonb:
    usage: "convert the markdown notebook to ipython notebook format"
    args:
      configdir:
        usage: >
          The config root directory.
    run:
      - task:
          name: configure
          args:
            - ${configdir}
      - command:
          exec: |
            set -e

            TUSKDIR=$(pwd)
            CONFIGVARS="${configvars}"
            eval ${READ_CONFIG}
            if ${configshow}; then eval ${SHOW_CONFIG}; exit 0; fi
            cd ${launchdir} && cd ${configdir}

            source ${pyenv}/bin/activate
            cat standard-plots.md | jupytext --from .md --to notebook --output standard-plots.ipynb

  tomd:
    usage: "convert the ipython notebook format back to markdown"
    args:
      configdir:
        usage: >
          The config root directory.
    run:
      - task:
          name: configure
          args:
            - ${configdir}
      - command:
          exec: |
            set -e

            TUSKDIR=$(pwd)
            CONFIGVARS="${configvars}"
            eval ${READ_CONFIG}
            if ${configshow}; then eval ${SHOW_CONFIG}; exit 0; fi
            cd ${launchdir} && cd ${configdir}

            source ${pyenv}/bin/activate
            cat standard-plots.md | jupytext --from .md --to notebook --output standard-plots.ipynb

